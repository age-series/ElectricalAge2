buildscript {
    repositories {
        // These repositories are only for Gradle plugins, put any other repositories in the repository block further below
        maven { url = 'https://maven.minecraftforge.net' }
        mavenCentral()
        maven { url = 'https://maven.parchmentmc.org' }
        maven { url = 'https://repo.spongepowered.org/repository/maven-public' }
        maven {
            url "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: "${forgegradle_version}", changing: true
        classpath "org.parchmentmc:librarian:${librarian_version}"
        classpath "org.spongepowered:mixingradle:${mixingradle_version}"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:1.8.0"
    }
}


plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.8.0'
    id 'org.jetbrains.kotlin.plugin.serialization' version '1.8.0'
    id 'com.github.johnrengelman.shadow' version '7.1.2'
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.parchmentmc.librarian.forgegradle'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'
apply plugin: 'org.spongepowered.mixin'

version = '2.0.0'
group = 'org.eln2.mc'
archivesBaseName = 'eln2'

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

tasks.build.dependsOn kotlinSourcesJar
tasks.build.dependsOn shadowJar

minecraft {
    mappings channel: 'parchment', version: "${parchment_version}-${minecraft_version}"

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            property 'forge.enabledGameTestNamespaces', 'eln2'

            mods {
                eln2 {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'eln2'

            mods {
                eln2 {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            args '--mod', 'eln2', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                eln2 {
                    source sourceSets.main
                }
            }
        }
    }
}

configurations {
    library
    implementation.extendsFrom library
}

reobf {
    shadowJar {
        // empty
    }
}

test {
    useJUnitPlatform()
}

// Include resources generated by data generators.
sourceSets.main.resources {
    srcDir 'src/generated/resources'
}

repositories {
    mavenCentral()
    maven {
        name 'JitPack'
        url 'https://jitpack.io'
    }
    maven {
        name 'tterrag maven'
        url 'https://maven.tterrag.com/'
    }
    maven {
        name = 'Kotlin for Forge'
        url = 'https://thedarkcolour.github.io/KotlinForForge/'
        content {
            includeGroup 'thedarkcolour'
        }
    }
    maven {
        url = 'https://maven2.bai.lol'
        content {
            includeGroup 'lol.bai'
            includeGroup 'mcp.mobius.waila'
        }
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    library ("org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.8.0") { exclude group: 'org.jetbrains', module: 'annotations'}
    library("org.jetbrains.kotlin:kotlin-reflect:1.8.0")
    library("org.jetbrains.kotlinx:kotlinx-serialization-json:1.5.0")

    compileOnly fg.deobf("mcp.mobius.waila:wthit-api:forge-${wthit_version}")
    runtimeOnly fg.deobf("mcp.mobius.waila:wthit:forge-${wthit_version}")
    runtimeOnly fg.deobf("lol.bai:badpackets:forge-${badpackets_version}")

    implementation fg.deobf("com.simibubi.create:create-${create_minecraft_version}:${create_version}:slim") { transitive = false }
    implementation fg.deobf("com.jozufozu.flywheel:flywheel-forge-${flywheel_minecraft_version}:${flywheel_version}")
    implementation fg.deobf("com.tterrag.registrate:Registrate:${registrate_version}")

    library "com.github.age-series:LibAge:${libage_version}"
    library 'org.apache.commons:commons-math3:3.6.1'
    library 'com.charleskorn.kaml:kaml:0.50.0'
    library 'org.joml:joml:1.10.5'

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'

    annotationProcessor "org.spongepowered:mixin:${mixin_version}:processor"
}

shadowJar {
    archiveClassifier.set("")
    configurations = [project.configurations.library]

    def rlTarget = "${project.group}.relocated"

    relocate 'kotlin', "${rlTarget}.kotlin"
    relocate 'com.charleskorn', "${rlTarget}.charleskorn"
    relocate 'org.snakeyaml', "${rlTarget}.snakeyaml"
    relocate 'org.apache.commons', "${rlTarget}.apache.commons"
    relocate 'org.ageseries', "${rlTarget}.ageseries"
    relocate 'org.intellij', "${rlTarget}.intellij"
    relocate 'jetbrains', "${rlTarget}.jetbrains"

    afterEvaluate {
        finalizedBy reobfShadowJar
    }
}

jar {
    //noinspection GroovyAssignabilityCheck
    archiveClassifier = 'slim'
    manifest {
        attributes([
            "Specification-Title"     : 'eln2',
            "Specification-Vendor"    : 'age-series-team',
            "Specification-Version"   : '2',
            "Implementation-Title"    : project.name,
            "Implementation-Version"  : project.jar.archiveVersion,
            "Implementation-Vendor"   : 'age-series-team',
            "Implementation-Timestamp": new Date().format('yyyy-MM-dd\'T\'HH:mm:ssZ')
        ])
    }
}

final def classpathBlacklist = [
    'annotations-23.0.0.jar'
]

minecraft.runs.configureEach {
    lazyToken('minecraft_classpath') {
        configurations.library.copyRecursive()
            .resolve()
            .stream()
            .filter {
                !classpathBlacklist.any { final blacklisted ->
                    it.path.endsWith(blacklisted)
                }
            }
            .collect { it.absolutePath }
            .join(File.pathSeparator)
    }
}

reobf {
    jar { classpath.from(sourceSets.main.compileClasspath) }
    shadowJar {}
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

jar.finalizedBy('reobfJar')

