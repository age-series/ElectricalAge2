buildscript {
    ext.kotlin_version = '1.6.10'
    repositories {
        // These repositories are only for Gradle plugins, put any other repositories in the repository block further below
        maven { url = 'https://maven.minecraftforge.net' }
        maven { url = 'https://maven.parchmentmc.org' }
        gradlePluginPortal()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath 'org.parchmentmc:librarian:1.+'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "gradle.plugin.com.github.johnrengelman:shadow:7.1.1"
    }
}
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.parchmentmc.librarian.forgegradle'
apply plugin: 'kotlin'
apply plugin: "com.github.johnrengelman.shadow"
apply from: 'https://raw.githubusercontent.com/thedarkcolour/KotlinForForge/site/thedarkcolour/kotlinforforge/gradle/kff-3.0.0.gradle'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'



version = '1.0'
group = 'org.eln2.mc'
archivesBaseName = 'eln2'

// Mojang ships Java 17 to end users in 1.18+, so your mod should target Java 17.
java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {
    mappings channel: 'parchment', version: "2022.01.23-1.18.1"

    runs {
        client {
            workingDirectory project.file('run')

            // The markers can be added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            mods {
                eln2 {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            mods {
                eln2 {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', 'eln2', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                eln2 {
                    source sourceSets.main
                }
            }
        }
    }
}

configurations {
    library
    implementation.extendsFrom library
    shadow.extendsFrom library
}

minecraft.runs.all {
    lazyToken('minecraft_classpath') {
        configurations.library.copyRecursive().resolve().collect { it.absolutePath }.join(File.pathSeparator)
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    mavenCentral()
    // Put repositories for dependencies here
    // ForgeGradle automatically adds the Forge maven and Maven Central for you

    // If you have mod jar dependencies in ./libs, you can declare them as a repository like so:
    // flatDir {
    //     dir 'libs'
    // }
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.18.1-39.0.76'
    implementation 'thedarkcolour:kotlinforforge:3.1.0'
    library("org.eln2:libelectric:0.1") {
        version {
            branch = "main"
        }
    }
    library "org.apache.commons:commons-math3:3.6.1"

    // Real mod deobf dependency examples - these get remapped to your current mappings
    // compileOnly fg.deobf("mezz.jei:jei-${mc_version}:${jei_version}:api") // Adds JEI API as a compile dependency
    // runtimeOnly fg.deobf("mezz.jei:jei-${mc_version}:${jei_version}") // Adds the full JEI mod as a runtime dependency
    // implementation fg.deobf("com.tterrag.registrate:Registrate:MC${mc_version}-${registrate_version}") // Adds registrate as a dependency

    // Examples using mod jars from ./libs
    // implementation fg.deobf("blank:coolmod-${mc_version}:${coolmod_version}")
}

jar {
    //noinspection GroovyAssignabilityCheck
    manifest {
        attributes([
                "Specification-Title"     : "eln2",
                "Specification-Vendor"    : "age-series-team",
                "Specification-Version"   : "1",
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "age-series-team",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

// Do shadow relocations
// (I can't figure out how to do this in an automatic, sensible way, so--for
// now--you will have to hunt down these dependencies manually and iteratively.
// Let ./gradlew dependencies be your guide, and/or the printlns below.
// Sorry!  - Grissess)
def shaded = [
    "com.charleskorn.kaml",
    "org.snakeyaml",
    "org.apache.commons"
].stream().collect()

shadowJar {
    dependencies {
        exclude(dependency {
            def res = !shaded.contains(it.moduleGroup)
            if(!res) println("Include: $it")
            else println("Exclude: $it")
            res
        })
    }
    shaded.forEach {
        relocate it, "org.ageseries.shadow" + it
    }
}

reobf {
    shadowJar { }
}
tasks.build.dependsOn reobfShadowJar
jar.finalizedBy 'reobfShadowJar'
shadowJar.finalizedBy 'reobfShadowJar'

// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar')
compileKotlin {
    kotlinOptions {
        jvmTarget = "17"
    }
}
compileTestKotlin {
    kotlinOptions {
        jvmTarget = "17"
    }
}
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
// publish.dependsOn('reobfJar')
